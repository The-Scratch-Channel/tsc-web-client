name: AI Issue Categorization

on:
  issues:
    types: [opened, edited]

jobs:
  categorize:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read

    steps:
      - name: Analyze issue with AI
        id: ai-categorize
        uses: actions/ai-inference@v1
        with:
          prompt: |
            Categorize this GitHub issue using one or more of these labels: 
            bug, question, enhancement, documentation, dependencies, 
            help-wanted, HIGH-PRIORITY, Medium-Priority, Low-Priority, 
            invalid, javascript, wontfix, update, release, deployment.
            Always add at least one priority one.
            Respond ONLY with comma-separated label names. No explanations. No extra characters.
            
            Issue Title: ${{ github.event.issue.title }}
            Issue Body: |
              ${{ github.event.issue.body }}

      - name: Clean AI output
        id: clean-label
        run: |
          # Clean and normalize AI output
          RAW_OUTPUT='${{ steps.ai-categorize.outputs.response }}'
          CLEANED=$(echo "$RAW_OUTPUT" | \
            tr '[:upper:]' '[:lower:]' | \
            sed -e 's/["'\''$$$$]//g' -e 's/[, ]\+/, /g' -e 's/^[ ,]*//' -e 's/[ ,]*$//')
          
          echo "raw_labels=$CLEANED" >> $GITHUB_OUTPUT

      - name: Apply validated labels
        uses: actions/github-script@v6
        with:
          script: |
            // Valid labels with exact casing
            const validLabels = new Set([
              'bug', 'question', 'enhancement', 'documentation', 
              'dependencies', 'help-wanted', 'HIGH-PRIORITY', 
              'Medium-Priority', 'Low-Priority', 'invalid', 
              'javascript', 'wontfix', 'update', 'release', 'deployment'
            ]);
            
            // Case-insensitive mapping
            const labelMap = new Map();
            validLabels.forEach(label => {
              labelMap.set(label.toLowerCase(), label);
            });
            
            // Process AI output
            const rawLabels = '${{ steps.clean-label.outputs.raw_labels }}';
            const receivedLabels = new Set();
            const finalLabels = new Set();
            
            // Split and validate labels
            rawLabels.split(/\s*,\s*/).forEach(label => {
              const normalized = label.trim().toLowerCase();
              if (labelMap.has(normalized) && !receivedLabels.has(normalized)) {
                finalLabels.add(labelMap.get(normalized));
                receivedLabels.add(normalized);
              }
            });
            
            // Add fallback if no valid labels found
            if (finalLabels.size === 0) {
              finalLabels.add('question');
            }
            
            // Apply labels to issue
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              labels: Array.from(finalLabels)
            });
